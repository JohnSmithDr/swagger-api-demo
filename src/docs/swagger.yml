swagger: "2.0"
info:
  version: "1.0.0"
  title: Swagger API Demo
host: localhost:3000
# basePath prefixes all resource paths
basePath: /api/v1
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
# security
securityDefinitions:
  apiKey:
    name: X-API-KEY
    type: apiKey
    in: header

paths:
  /:
    x-swagger-router-controller: index
    get:
      summary: Greeting
      description: returns "Hello World" as a message
      operationId: default
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
      responses:
        200:
          $ref: "#/responses/ApiResponse"
        default:
          $ref: "#/responses/ErrorResponse"
  /auth:
    x-swagger-router-controller: auth
    post:
      summary: User authentication
      description: Validate user by account and password and create session for user. Use as user login.
      operationId: basicAuth
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/basicAuthBody"
      responses:
        200:
          $ref: "#/responses/AuthResultResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Auth
  /users:
    x-swagger-router-controller: users
    get:
      summary: Query users
      description: Query users by id, phone and email. Supports multiple id query, fields selection, and pagination.
      operationId: queryUsers
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/queryUserId"
        - $ref: "#/parameters/queryUserPhone"
        - $ref: "#/parameters/queryUserEmail"
        - $ref: "#/parameters/queryFields"
        - $ref: "#/parameters/queryPageIndex"
        - $ref: "#/parameters/queryPageSize"
      responses:
        200:
          $ref: "#/responses/UserQueryResultResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Management
    post:
      summary: Create a new user
      description: |
        Create a new user and return the user info.
        Because phone and email are unique for each user, so if phone or email is duplicated, the creation fails.
      operationId: createUser
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/userCreationBody"
      responses:
        200:
          $ref: "#/responses/UserResultResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Management
  /users/{user_id}:
    x-swagger-router-controller: users
    get:
      summary: Get user information
      description: Get user information by user id, phone, email or session token. Supports fields selection.
      operationId: getUser
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/userId"
        - $ref: "#/parameters/queryFields"
      responses:
        200:
          $ref: "#/responses/UserResultResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Management
    patch:
      summary: Update user information
      description: Update user and return the updated user. Each field in body will be updated.
      operationId: updateUser
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/userId"
        - $ref: "#/parameters/userModificationBody"
      responses:
        200:
          $ref: "#/responses/UserResultResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Management
    delete:
      summary: Delete user
      description: Delete user. Note that data won't actually delete from database.
      operationId: deleteUser
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/userId"
      responses:
        200:
          $ref: "#/responses/ApiResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Management
  /users/{user_id}/password:
    x-swagger-router-controller: users
    patch:
      summary: Update user password
      description: |
        Update user password by providing both old password and new password.
        Supports revoking all the sessions of user after password has been updated.
      operationId: updateUserPassword
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/userId"
        - $ref: "#/parameters/userPasswordModificationBody"
      responses:
        200:
          $ref: "#/responses/ApiResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Management
  /users/{user_id}/sessions:
    x-swagger-router-controller: users
    get:
      summary: Get user sessions
      description: Get all sessions of user.
      operationId: getUserSessions
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/userId"
      responses:
        200:
          $ref: "#/responses/SessionQueryResultResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Management
        - User Sessions Management
    post:
      summary: Create user session
      description: Create a new sessions for user. Should provide ip of user client for creation.
      operationId: createUserSession
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/userId"
        - $ref: "#/parameters/sessionCreationBody"
      responses:
        200:
          $ref: "#/responses/SessionResultResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Management
        - User Sessions Management
    delete:
      summary: Delete user sessions
      description: Delete all sessions of user.
      operationId: deleteUserSession
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/userId"
      responses:
        200:
          $ref: "#/responses/ApiResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - User Management
        - User Sessions Management
  /sessions/{session_token}:
    x-swagger-router-controller: sessions
    get:
      summary: Get session
      description: Get session by token.
      operationId: getSession
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/sessionToken"
      responses:
        200:
          $ref: "#/responses/SessionResultResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - Session Management
    delete:
      summary: Delete session
      description: Delete session by token.
      operationId: deleteSession
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/sessionToken"
      responses:
        200:
          $ref: "#/responses/ApiResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - Session Management
  /sessions/{session_token}/data:
    patch:
      summary: Update session data
      description: |
        Update session data by supplying token and data.
        The data object contains a simple key/value list where values can be string, number, boolean or null.
        To remove keys set them to null. Keys that are not supplied will not be touched.
      operationId: updateSessionData
      security:
        - apiKey: []
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/sessionToken"
        - $ref: "#/parameters/sessionDataModificationBody"
      responses:
        200:
          $ref: "#/responses/ApiResponse"
        default:
          $ref: "#/responses/ErrorResponse"
      tags:
        - Session Management

# parameters
parameters:
  apiKey:
    name: X-API-KEY
    in: header
    description: api key for auth
    type: string
    default: 5axexusUch2phejewAFrubruneSeresW
  queryPageSize:
    name: pageSize
    in: query
    required: false
    description: query page size
    type: integer
    minimum: 1
  queryPageIndex:
    name: pageIndex
    in: query
    required: false
    description: query page index from 1
    type: integer
    minimum: 1
  queryFields:
    name: fields
    in: query
    required: false
    description: fields to return in api result, fields separate by comma (,)
    type: string
  queryUserId:
    name: id
    in: query
    description: query user by id, support multiple id separated by comma (,)
    required: false
    type: string
  queryUserPhone:
    name: phone
    in: query
    description: query user by phone number
    required: false
    type: string
  queryUserEmail:
    name: email
    in: query
    description: query user by email address
    required: false
    type: string
  userId:
    name: user_id
    in: path
    required: true
    description: user id
    type: string
  userCreationBody:
    name: body
    in: body
    required: true
    schema:
      $ref: "#/definitions/UserCreationBody"
  userModificationBody:
    name: body
    in: body
    required: true
    schema:
      $ref: "#/definitions/UserModificationBody"
  userPasswordModificationBody:
    name: body
    in: body
    required: true
    schema:
      $ref: "#/definitions/UserPasswordModificationBody"
  sessionToken:
    name: session_token
    in: path
    required: true
    description: session token
    type: string
  sessionCreationBody:
    name: body
    in: body
    required: true
    schema:
      $ref: "#/definitions/SessionCreationBody"
  sessionDataModificationBody:
    name: body
    in: body
    required: true
    schema:
      $ref: "#/definitions/SessionDataModificationBody"
  basicAuthBody:
      name: body
      in: body
      required: true
      schema:
        $ref: "#/definitions/BasicAuthBody"
# complex objects have schema definitions
definitions:
  ApiResult:
    additionalProperties: true
    properties:
      code:
        description: http response status code
        type: integer
        default: 200
  ApiError:
    properties:
      code:
        description: http response status code
        type: integer
      error_code:
        description: code to identify error
        type: string
      error_message:
        description: message describe the error briefly
        type: string
      error_detail:
        description: error detail information to local the error
        type: string

  PaginationModel:
    properties:
      pageIndex:
        description: page index from 1
        type: integer
        minimum: 1
      pageSize:
        description: page size
        type: integer
        minimum: 1
      totalPageCount:
        description: total page count
        type: integer
        minimum: 0
      totalItemCount:
        description: total item count
        type: integer
        minimum: 0
  UserModel:
    properties:
      id:
        description: user id
        type: string
      phone:
        description: unique user phone number
        type: string
      email:
        description: unique user email address
        type: string
      fullname:
        description: user fullname or real name
        type: string
      nickname:
        description: user nickname or display name
        type: string
      gender:
        description: user gender ( 0 for not set, 1 for male, 2 for female )
        type: integer
      birthday:
        description: user birthday in timestamp
        type: integer
      created_at:
        description: user creation time in timestamp
        type: integer
      portrait:
        description: user portrait url
        type: string
  UserCreationBody:
    properties:
      phone:
        description: user phone number
        type: string
        pattern: "^(\\d{11})$"
      email:
        description: user email address
        type: string
        pattern: "^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$"
      password:
        description: password, required when create with email
        type: string
        minLength: 6
        maxLength: 32
      fullname:
        description: fullname or real name
        type: string
      nickname:
        description: nickname or display name
        type: string
      gender:
        description: gender ( 0 for not set, 1 for male, 2 for female )
        type: integer
        minimum: 0
        maximum: 2
        default: 0
      birthday:
        description: birthday in timestamp
        type: integer
  UserModificationBody:
    minProperties: 1
    properties:
      phone:
        description: set to update phone number
        type: string
      email:
        description: set to update email address
        type: string
      fullname:
        description: set to update fullname
        type: string
      nickname:
        description: set to update nickname
        type: string
      gender:
        description: set to update gender
        type: integer
        minimum: 0
        maximum: 2
      birthday:
        description: set to update birthday
        type: integer
      portrait:
        description: set to update portrait url
        type: string
  UserPasswordModificationBody:
    required:
      - old_password
      - new_password
    properties:
      old_password:
        description: the original password
        type: string
      new_password:
        description: the new password
        type: string
      revoke_sessions:
        description: whether to revoke sessions after password is modified successfully
        type: boolean
        default: false
  UserResult:
    allOf:
      - "$ref": "#/definitions/ApiResult"
    properties:
      data:
        properties:
          user:
            $ref: "#/definitions/UserModel"
  UserQueryResult:
    allOf:
      - "$ref": "#/definitions/ApiResult"
    properties:
      data:
        properties:
          users:
            type: array
            items:
              $ref: "#/definitions/UserModel"
          pagination:
              $ref: "#/definitions/PaginationModel"
  SessionModel:
    properties:
      uid:
        description: user id
        type: string
      token:
        description: session tokem
        type: string
      ttl:
        description: session time to live in seconds
        type: integer
      data:
        description: user data in session
        type: object
  SessionCreationBody:
    properties:
      ip:
        description: ip of client/agent
        type: string
      ttl:
        description: session time to live in seconds
        type: integer
        default: 7200
      data:
        description: user data in session
        type: object
  SessionDataModificationBody:
    properties:
      data:
        description: user data in session
        type: object
  SessionResult:
    allOf:
      - "$ref": "#/definitions/ApiResult"
    properties:
      data:
        properties:
          session:
            $ref: "#/definitions/SessionModel"
  SessionQueryResult:
    allOf:
      - "$ref": "#/definitions/ApiResult"
    properties:
      data:
        properties:
          sessions:
            type: array
            items:
              $ref: "#/definitions/UserModel"
  AuthSessionOptions:
    required:
      - mode
    properties:
      mode:
        description: session creation mode, none for not creating session
        type: string
        enum:
          - none
          - exclusive
          - independent
      ip:
        description: ip address of user client/agent
        type: string
      ttl:
        description: ip address of user client/agent
        type: number
      data:
        description: initial data for user session
        type: object
  BasicAuthBody:
    required:
      - account
      - password
      - session_opts
    properties:
      account:
        description: phone or email as account
        type: string
      password:
        description: password to validate
        type: string
      session_opts:
        $ref: "#/definitions/AuthSessionOptions"
  AuthResult:
    allOf:
      - "$ref": "#/definitions/ApiResult"
    properties:
      data:
        properties:
          user:
            $ref: "#/definitions/UserModel"
          session:
            $ref: "#/definitions/SessionModel"
# responses
responses:
  ApiResponse:
    description: Success
    schema:
      $ref: "#/definitions/ApiResult"
  ErrorResponse:
    description: Error
    schema:
      $ref: "#/definitions/ApiError"
  UserResultResponse:
    description: Success
    schema:
      $ref: "#/definitions/UserResult"
  UserQueryResultResponse:
    description: Success
    schema:
      $ref: "#/definitions/UserQueryResult"
  SessionResultResponse:
    description: Success
    schema:
      $ref: "#/definitions/SessionResult"
  SessionQueryResultResponse:
    description: Success
    schema:
      $ref: "#/definitions/SessionQueryResult"

  AuthResultResponse:
      description: Success
      schema:
        $ref: "#/definitions/AuthResult"
